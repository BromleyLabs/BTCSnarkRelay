import "./header_hash.code" as HEADERHASH
import "./compute_new_target.code" as NEWTARGET 
import "./modulo.code" as MODULO
import "./target_from_bits.code" as GETTARGET
import "./le_to_be.code" as BIGENDIAN
import "./bits_to_value32.code" as BITSTOVALUE32

//@dev Timestamp bits extracted from block header. First converted to 
//big-endian and then converted to seconds
def getTimeInSec(t31, t30, t29, t28, t27, t26, t25, t24, t23, t22, t21, t20, t19, t18, t17, t16, t15, t14, t13, t12, t11, t10, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0):
    s31, s30, s29, s28, s27, s26, s25, s24, s23, s22, s21, s20, s19, s18, s17, s16, s15, s14, s13, s12, s11, s10, s9, s8, s7, s6, s5, s4, s3, s2, s1, s0 = BIGENDIAN(t31, t30, t29, t28, t27, t26, t25, t24, t23, t22, t21, t20, t19, t18, t17, t16, t15, t14, t13, t12, t11, t10, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0)
            
    seconds = BITSTOVALUE(s31, s30, s29, s28, s27, s26, s25, s24, s23, s22, s21, s20, s19, s18, s17, s16, s15, s14, s13, s12, s11, s10, s9, s8, s7, s6, s5, s4, s3, s2, s1, s0)
    return seconds
 
//@dev Verify given BTC header given previous header. 
//@param currHeader 640 bits of header to be verified 
//@param prevHeader 640 bits of header of previous verified header
//@param startTime uint Time in seconds (from epoch) of block where difficulty
//was adjusted. i.e. block_number % 2016 == 0
def main(<curr_header>, <prev_header>, startTime, prevBlockNumber):
    // Extract previous header hash from curr_header

    // Check if hash(prev_header) == above hash

    prevTime = getTimeInSec(p95, p94, p93, p92, p91, p90, p89, p88, p87, p86, p85, p84, p83, p82, p81, p80, p79, p78, p77, p76, p75, p74, p73, p72, p71, p70, p69, p68, p67, p66, p65, p64)  

    prevTarget = GETTARGET(p63, p62, p61, p60, p59, p58, p57, p56, p55, p54, p53, p52, p51, p50, p49, p48, p47, p46, p45, p44, p43, p42, p41, p40, p39, p38, p37, p36, p35, p34, p33, p32)

    target = if MODULO(prevBlockNumber + 1, 2016) == 0 then prevTarget else NEWTARGET(prevTime, startTime, prevTarget) fi 

    // TODO: Computed nbits should match nbits in curr_header

    // Take hash of curr_header
    // Check if above hash is > 0 and < target

